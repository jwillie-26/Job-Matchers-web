"use strict";

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var Comment = require('postcss/lib/comment');

var Parser = require('postcss/lib/parser');

var NestedDeclaration = require('./nested-declaration');

var scssTokenizer = require('./scss-tokenize');

var ScssParser =
/*#__PURE__*/
function (_Parser) {
  _inheritsLoose(ScssParser, _Parser);

  function ScssParser() {
    return _Parser.apply(this, arguments) || this;
  }

  var _proto = ScssParser.prototype;

  _proto.createTokenizer = function createTokenizer() {
    this.tokenizer = scssTokenizer(this.input);
  };

  _proto.rule = function rule(tokens) {
    var withColon = false;
    var brackets = 0;
    var value = '';

    for (var _iterator = tokens, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var _i2 = _ref;

      if (withColon) {
        if (_i2[0] !== 'comment' && _i2[0] !== '{') {
          value += _i2[1];
        }
      } else if (_i2[0] === 'space' && _i2[1].indexOf('\n') !== -1) {
        break;
      } else if (_i2[0] === '(') {
        brackets += 1;
      } else if (_i2[0] === ')') {
        brackets -= 1;
      } else if (brackets === 0 && _i2[0] === ':') {
        withColon = true;
      }
    }

    if (!withColon || value.trim() === '' || /^[a-zA-Z-:#]/.test(value)) {
      _Parser.prototype.rule.call(this, tokens);
    } else {
      tokens.pop();
      var node = new NestedDeclaration();
      this.init(node);
      var last = tokens[tokens.length - 1];

      if (last[4]) {
        node.source.end = {
          line: last[4],
          column: last[5]
        };
      } else {
        node.source.end = {
          line: last[2],
          column: last[3]
        };
      }

      while (tokens[0][0] !== 'word') {
        node.raws.before += tokens.shift()[1];
      }

      node.source.start = {
        line: tokens[0][2],
        column: tokens[0][3]
      };
      node.prop = '';

      while (tokens.length) {
        var type = tokens[0][0];

        if (type === ':' || type === 'space' || type === 'comment') {
          break;
        }

        node.prop += tokens.shift()[1];
      }

      node.raws.between = '';
      var token;

      while (tokens.length) {
        token = tokens.shift();

        if (token[0] === ':') {
          node.raws.between += token[1];
          break;
        } else {
          node.raws.between += token[1];
        }
      }

      if (node.prop[0] === '_' || node.prop[0] === '*') {
        node.raws.before += node.prop[0];
        node.prop = node.prop.slice(1);
      }

      node.raws.between += this.spacesAndCommentsFromStart(tokens);
      this.precheckMissedSemicolon(tokens);

      for (var i = tokens.length - 1; i > 0; i--) {
        token = tokens[i];

        if (token[1] === '!important') {
          node.important = true;
          var string = this.stringFrom(tokens, i);
          string = this.spacesFromEnd(tokens) + string;

          if (string !== ' !important') {
            node.raws.important = string;
          }

          break;
        } else if (token[1] === 'important') {
          var cache = tokens.slice(0);
          var str = '';

          for (var j = i; j > 0; j--) {
            var _type = cache[j][0];

            if (str.trim().indexOf('!') === 0 && _type !== 'space') {
              break;
            }

            str = cache.pop()[1] + str;
          }

          if (str.trim().indexOf('!') === 0) {
            node.important = true;
            node.raws.important = str;
            tokens = cache;
          }
        }

        if (token[0] !== 'space' && token[0] !== 'comment') {
          break;
        }
      }

      this.raw(node, 'value', tokens);

      if (node.value.indexOf(':') !== -1) {
        this.checkMissedSemicolon(tokens);
      }

      this.current = node;
    }
  };

  _proto.comment = function comment(token) {
    if (token[6] === 'inline') {
      var node = new Comment();
      this.init(node, token[2], token[3]);
      node.raws.inline = true;
      node.source.end = {
        line: token[4],
        column: token[5]
      };
      var text = token[1].slice(2);

      if (/^\s*$/.test(text)) {
        node.text = '';
        node.raws.left = text;
        node.raws.right = '';
      } else {
        var match = text.match(/^(\s*)([^]*[^\s])(\s*)$/);
        var fixed = match[2].replace(/(\*\/|\/\*)/g, '*//*');
        node.text = fixed;
        node.raws.left = match[1];
        node.raws.right = match[3];
        node.raws.text = match[2];
      }
    } else {
      _Parser.prototype.comment.call(this, token);
    }
  };

  _proto.raw = function raw(node, prop, tokens) {
    _Parser.prototype.raw.call(this, node, prop, tokens);

    if (node.raws[prop]) {
      var scss = node.raws[prop].raw;
      node.raws[prop].raw = tokens.reduce(function (all, i) {
        if (i[0] === 'comment' && i[6] === 'inline') {
          var text = i[1].slice(2).replace(/(\*\/|\/\*)/g, '*//*');
          return all + '/*' + text + '*/';
        } else {
          return all + i[1];
        }
      }, '');

      if (scss !== node.raws[prop].raw) {
        node.raws[prop].scss = scss;
      }
    }
  };

  return ScssParser;
}(Parser);

module.exports = ScssParser;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjc3MtcGFyc2VyLmVzNiJdLCJuYW1lcyI6WyJDb21tZW50IiwicmVxdWlyZSIsIlBhcnNlciIsIk5lc3RlZERlY2xhcmF0aW9uIiwic2Nzc1Rva2VuaXplciIsIlNjc3NQYXJzZXIiLCJjcmVhdGVUb2tlbml6ZXIiLCJ0b2tlbml6ZXIiLCJpbnB1dCIsInJ1bGUiLCJ0b2tlbnMiLCJ3aXRoQ29sb24iLCJicmFja2V0cyIsInZhbHVlIiwiaSIsImluZGV4T2YiLCJ0cmltIiwidGVzdCIsInBvcCIsIm5vZGUiLCJpbml0IiwibGFzdCIsImxlbmd0aCIsInNvdXJjZSIsImVuZCIsImxpbmUiLCJjb2x1bW4iLCJyYXdzIiwiYmVmb3JlIiwic2hpZnQiLCJzdGFydCIsInByb3AiLCJ0eXBlIiwiYmV0d2VlbiIsInRva2VuIiwic2xpY2UiLCJzcGFjZXNBbmRDb21tZW50c0Zyb21TdGFydCIsInByZWNoZWNrTWlzc2VkU2VtaWNvbG9uIiwiaW1wb3J0YW50Iiwic3RyaW5nIiwic3RyaW5nRnJvbSIsInNwYWNlc0Zyb21FbmQiLCJjYWNoZSIsInN0ciIsImoiLCJyYXciLCJjaGVja01pc3NlZFNlbWljb2xvbiIsImN1cnJlbnQiLCJjb21tZW50IiwiaW5saW5lIiwidGV4dCIsImxlZnQiLCJyaWdodCIsIm1hdGNoIiwiZml4ZWQiLCJyZXBsYWNlIiwic2NzcyIsInJlZHVjZSIsImFsbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxxQkFBRCxDQUFyQjs7QUFDQSxJQUFJQyxNQUFNLEdBQUdELE9BQU8sQ0FBQyxvQkFBRCxDQUFwQjs7QUFFQSxJQUFJRSxpQkFBaUIsR0FBR0YsT0FBTyxDQUFDLHNCQUFELENBQS9COztBQUNBLElBQUlHLGFBQWEsR0FBR0gsT0FBTyxDQUFDLGlCQUFELENBQTNCOztJQUVNSSxVOzs7Ozs7Ozs7OztTQUNKQyxlLDhCQUFtQjtBQUNqQixTQUFLQyxTQUFM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